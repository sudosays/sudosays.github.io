<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on Evil Inc.</title>
    <link>http://sudosays.github.io/categories/tools/</link>
    <description>Recent content in tools on Evil Inc.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Mar 2021 16:21:07 +0200</lastBuildDate><atom:link href="http://sudosays.github.io/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Master&#39;s Tools</title>
      <link>http://sudosays.github.io/blog/the-masters-tools/</link>
      <pubDate>Thu, 18 Mar 2021 16:21:07 +0200</pubDate>
      
      <guid>http://sudosays.github.io/blog/the-masters-tools/</guid>
      <description>In order to build an evil empire, one must be able to build. To build things that are robust and long lasting requires the carefully honed skill of the master. Mastery is required if one is to become an effective supervillain. It is important to develop a deep knowledge and mastery over the tools required for one&amp;rsquo;s schemes.</description>
      <content>
        &lt;p&gt;In order to build an evil empire, one must be able to build. To build things
that are robust and long lasting requires the carefully honed skill of the
master. Mastery is required if one is to become an effective supervillain. It is
important to develop a deep knowledge and mastery over the tools required for
one&amp;rsquo;s schemes.  It will enable self-sufficiency and self-reliance in an age
where convenience is traded for control.&lt;/p&gt;
&lt;p&gt;The contemporary mad-scientist Adam Savage is such a master. Savage&amp;rsquo;s art of
building things quietly shows that he is intimately familiar with his tools and
their use cases. More than that, he has a plethora of tools at hand that he has
built for himself over the years. Savage is able to select and use the correct
tool for each occaision to maxmimum efficiency. I believe that this a mark of a
master craftsman: to possess a deep familiarity with your tools so that their
use becomes an extension of your intent. Should I ever need to build malevolent
siege engines or other nefarious mechanisms, I would definitely attempt to
recruit Adam Savage.&lt;/p&gt;
&lt;p&gt;This familiarity yields another benefit: the ability to repair and build one&amp;rsquo;s
own tools. For the modern age, the right to repair is paramount. It allows one
to shrug off the dependency of corporations that seek to control and regulate
technologies and their use. Open source tools and software enable
self-sufficiency and self-reliance through freedom. As supervillains, autonomy
is an requirement.&lt;/p&gt;
&lt;p&gt;When The Pirate Bay faced elimination by Interpol and other law agencies, the
knowledge and skills of the site&amp;rsquo;s crew allowed them to evade the authorities by
hiding servers in caves and routing traffic through low-orbit drones. This is an
example of resilience through mastery. The crew deeply understood their system,
what was required to keep it running, and the tools needed to make it happen.
Conversely, other sites have traded power for convenience by relying on &amp;ldquo;as a
service&amp;rdquo; solutions that require less know-how to create and manage and have paid
the price.&lt;/p&gt;
&lt;p&gt;For an evil empire, it is better to err on the side of do-it-yourself. After
all, our motto here is: &amp;ldquo;knowledge is power&amp;rdquo;. Invest the time into
understanding the tools that you use. The more you use it, the better you
should know it. Learn how to repair, upgrade, modify, and extend it. Build your
own tools. Deign to get your hands dirty and (if not reinvent) reimplement
the wheel. Then, should you choose to use a pre-made wheel, at least you
understand it more deeply.&lt;/p&gt;
&lt;p&gt;This does, however, come with a caveat: do not get mired in the design of
tools. Learn them through use. Instead of polishing the hammer swing it until
it breaks then repair it. Grow accustomed to the weight and feel.&lt;/p&gt;
&lt;p&gt;By mastering and building the tools you use, the application of
your intent becomes easier. The knowledge of your chosen trade/specialty
broadens and strengthens your foundations. Complete mastery of your tools will
enable you to build a lasting and robust evil empire.&lt;/p&gt;

      </content>
    </item>
    
    <item>
      <title>Devlog: Pneuma</title>
      <link>http://sudosays.github.io/blog/devlog-pneuma/</link>
      <pubDate>Wed, 10 Feb 2021 07:40:42 +0200</pubDate>
      
      <guid>http://sudosays.github.io/blog/devlog-pneuma/</guid>
      <description>Producing propaganda takes priority for prospective pernicious persons. As a supervillian, it is important to be able to reach your audience and propagate your ideas. This blog is my version of that and for the last while I have been using the static site generator Hugo after migrating from Wordpress (see this post).</description>
      <content>
        &lt;p&gt;Producing propaganda takes priority for prospective pernicious persons. As a
supervillian, it is important to be able to reach your audience and propagate
your ideas. This blog is my version of that and for the last while I have been
using the static site generator Hugo after migrating from Wordpress (see &lt;a href=&#34;http://sudosays.github.io/blog/be-static-to-go-faster/&#34;&gt;this
post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My typical workflow for writing a new post is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the blog working directory&lt;/li&gt;
&lt;li&gt;Create the new post using &lt;code&gt;hugo new blog/title.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit/write the post with &lt;code&gt;vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the header data to &lt;code&gt;draft = false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate the site files with &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Publish the files to Github pages with &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This workflow has been great, but it also has a few drawbacks. Chief of which
is there is not really a nice overview of the posts on the site and the
management of the posts is a bit tedious&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Hugo has the &lt;code&gt;hugo list&lt;/code&gt; subcommand,
but the options are: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;drafts&lt;/code&gt;, &lt;code&gt;expired&lt;/code&gt;, and &lt;code&gt;future&lt;/code&gt;. Selecting &lt;code&gt;all&lt;/code&gt;
dumps detailed CSV data of all the posts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;path,slug,title,date,expiryDate,publishDate,draft,permalink
content/blog/devlog-pneuma.md,,Devlog:
Pneuma,2021-01-22T09:40:42+02:00,0001-01-01T00:00:00Z,2021-01-22T09:40:42+02:00,true,http://sudosays.github.io/blog/devlog-pneuma/
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above output is not really human-friendly at a glance.  Meanwhile, &lt;code&gt;hugo list drafts&lt;/code&gt; only lists the paths of the files marked as drafts.&lt;/p&gt;
&lt;p&gt;Finally, deletion of posts is done manually, and publishing a draft requires
opening the file to edit the header. In terms of CRUD, it is a very disjointed
process.&lt;/p&gt;
&lt;p&gt;To address this slight inconvenience I had an idea to write an interactive
frontend for Hugo that will let me perform some basic management in a simple
and straightforward way. It was not until I started writing a lot more Go and
had a bit of free time on my hands that pneuma was born.&lt;/p&gt;
&lt;p&gt;Below I detail some interesting challenges I have had to solve so far.&lt;/p&gt;
&lt;h2 id=&#34;designing-the-tui&#34;&gt;Designing the TUI&lt;/h2&gt;
&lt;p&gt;Executing the Hugo commands and parsing their input is straightforward enough
with the &lt;code&gt;os/exec&lt;/code&gt; package, but what I wanted was an interactive user
interface. So I had a look at some TUI based programs I enjoy, particularly
&lt;a href=&#34;https://aerc-mail.org/&#34;&gt;&lt;code&gt;aerc&lt;/code&gt;&lt;/a&gt; by &lt;a href=&#34;https://drewdevault.com/&#34;&gt;Drew Devault&lt;/a&gt;
and I saw that he made use of the &lt;a href=&#34;https://github.com/gdamore/tcell&#34;&gt;&lt;code&gt;tcell&lt;/code&gt;&lt;/a&gt; package by &lt;a href=&#34;http://gdamore.blogspot.com/&#34;&gt;Garrett D&amp;rsquo;Amore&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tcell&lt;/code&gt; provides a very bare-bones approach to TUI design. Central to the
package is the idea of a &lt;code&gt;Screen&lt;/code&gt; where you can &lt;code&gt;SetContent&lt;/code&gt; one character at a
time and then &lt;code&gt;PollEvent&lt;/code&gt; to wait for an event. This means that &lt;code&gt;tcell&lt;/code&gt;
promotes an event-driven approach to creating a TUI&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;What followed was a tight iteration loop, gradually building out a UI system.
Each iteration built upon the last and the API would abstract away from lower
level functions. This resulted in the following data structure for a UI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Screen&lt;/span&gt;      &lt;span style=&#34;color:#000&#34;&gt;tcell&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Screen&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Cursor&lt;/span&gt;      &lt;span style=&#34;color:#000&#34;&gt;cursor&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Exit&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Style&lt;/span&gt;       &lt;span style=&#34;color:#000&#34;&gt;tcell&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Style&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Mode&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Mode&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The most basic functionality is achieved with two functions: &lt;code&gt;putRune&lt;/code&gt; and
&lt;code&gt;MoveCursor&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MoveCursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Screen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Size&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;errors&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cursor out of bounds&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Cursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;X&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Cursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;putRune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Screen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SetContent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Cursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Cursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Style&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Building on only these two functions, emerged more sophisticated behaviours
such as &lt;code&gt;putStr&lt;/code&gt;, &lt;code&gt;hLine&lt;/code&gt;, &lt;code&gt;vLine&lt;/code&gt;. From those, even more such as drawing
boxes. However, as our UI became more sophisticated, drawing and managing the
content on the screen became more complex. It was serviceable, but
tedious.&lt;/p&gt;
&lt;p&gt;For example, drawing a UI with some text labels would be as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MoveCursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PutStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;A string of text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MoveCursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PutStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Another string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;aList&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;some&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;items&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MoveCursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;aList&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MoveCursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PutStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Sprintf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d: %s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To simplify things, I wanted to have all of the content on screen added to the
UI with a widget approach. The content of the screen can be rendered with a
single call to &lt;code&gt;ui.Draw&lt;/code&gt; and each widget would handle its own draw logic.&lt;/p&gt;
&lt;p&gt;In Go, we can achieve this by having a common interface which we will call
&lt;code&gt;Drawable&lt;/code&gt;. This way we can specify a shared function signature and group
structs that share the interface together. Now, our UI can contain a slice of
&lt;code&gt;Drawable&lt;/code&gt; items that we iterate through and call their individual &lt;code&gt;Draw&lt;/code&gt;
methods on.&lt;/p&gt;
&lt;p&gt;For eaxmple, a &lt;code&gt;Label&lt;/code&gt; widget is defined as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Drawable&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Draw&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Content&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Draw&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MoveCursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;putString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Content&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now all we need to do to draw our entire UI is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Draw&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;drawable&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Content&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;drawable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Draw&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that we can add/remove widgets to our UI on demand and redraw the UI
as needed. Also, if we want to add different widget types, they just need to
implement the &lt;code&gt;Drawable&lt;/code&gt; interface.&lt;/p&gt;
&lt;h2 id=&#34;interactivity-and-callbacks&#34;&gt;Interactivity and Callbacks&lt;/h2&gt;
&lt;p&gt;The TUI is event-driven. It blocks on &lt;code&gt;tcell.Screen.PollEvent&lt;/code&gt; and so &lt;code&gt;pneuma&lt;/code&gt;
spins on this. I have taken inspiration from a few TUI programs and developed a
&lt;code&gt;ui.Tick()&lt;/code&gt; function that the main program repeatedly calls while waiting for
an event. In this function, we synchronise the screen contents, update any
state information of widgets, and then poll for events.&lt;/p&gt;
&lt;p&gt;At first, I hardcoded commands and their behaviour into the event polling, but
this proved really inflexible. It also tightly coupled the UI logic with the
program logic which started forcing more and more spaghetti code into the
project to cover different contexts and use cases.&lt;/p&gt;
&lt;p&gt;What I wanted was a way to dynamically set the commands that can be executed
instead of manually inputting the logic for each specific situation. While the
project is probably small enough that I could have gotten away without it, it
still presented an interesting problem.&lt;/p&gt;
&lt;p&gt;My solution? Callback functions.&lt;/p&gt;
&lt;p&gt;The approach is simple: we link certain key events to functions that we want
called. Then when the UI polls for events, it checks if any of the key events
in the commands list has happened and then call the appropriate function.&lt;/p&gt;
&lt;p&gt;For my implementation I made use of Go&amp;rsquo;s &lt;code&gt;map&lt;/code&gt; data structure which has a
lookup time of O(1). The end result looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CommandKey&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Key&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;tcell&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Key&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Rune&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rune&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Mod&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;tcell&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ModMask&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#000&#34;&gt;Commands&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CommandKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;CommandKey&lt;/code&gt; struct is used to compare the &lt;code&gt;tcell.EventKey&lt;/code&gt; while ignoring
the unnecessary information.&lt;/p&gt;
&lt;p&gt;Using this approach the event polling in the TUI is much, much simpler while
also being dynamically configurable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PneumaUI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Tick&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ev&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Screen&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PollEvent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tcell&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EventKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CommandKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Mod&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Modifiers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()}&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Commands&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;callback&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Execute the callback function
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Redraw&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that in our main program we can dynamically configure the commands
as needed, passing the callback functions we want.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;editPost&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;posts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Path&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;startEditor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;quitCmdEventKey&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;libui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CommandKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tcell&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;KeyRune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Mod&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tcell&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ModNone&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;cmds&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;libui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CommandKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;cmds&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;quitCmdEventKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;quit&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;cmds&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;enterCmdEventKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;editPost&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SetCommands&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cmds&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the commands are set, we simply loop and tick the UI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Tick&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is interesting to note that we make use of an anonymous function when we
specify &lt;code&gt;editPost&lt;/code&gt;. This is because, while we want to call &lt;code&gt;startEditor&lt;/code&gt; we
also want to do some work beforehand. Ultimately, we can start to compose more
and more complicated functionality that is passed as a single command.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s all for the interactivity!&lt;/p&gt;
&lt;h3 id=&#34;issue-input-capture-and-control&#34;&gt;Issue: Input Capture and Control&lt;/h3&gt;
&lt;p&gt;One of the persistent issues I am currently facing is when I want to edit
files. Currently, my code is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;startEditor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;editorCmd&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Command&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;vim&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;editorCmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Stdin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;editorCmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Stdout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;editorCmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Stderr&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Stdin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Stdout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Stderr&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;editorCmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;editorCmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Wait&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this, I hand over the os.Std(in/out/err) files to &lt;code&gt;vim&lt;/code&gt;, but I am finding
that &lt;code&gt;vim&lt;/code&gt; is lagging heavily. On top of that, it seems that input is also
being captured by &lt;code&gt;pneuma&lt;/code&gt; (such as &lt;code&gt;q&lt;/code&gt;) and is quitting the program, while
&lt;code&gt;vim&lt;/code&gt; is running. It appears to be an &lt;a href=&#34;https://github.com/golang/go/issues/37217&#34;&gt;issue in &lt;code&gt;golang&lt;/code&gt;
itself&lt;/a&gt; when forking processes and
trying to run them in the foreground. It might also be that &lt;code&gt;tcell&lt;/code&gt; is setting
the terminal into a strange state that &lt;code&gt;vim&lt;/code&gt; is then trying to correct from.&lt;/p&gt;
&lt;p&gt;Regardless, it presents an interesting an novel problem to me.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in hacking on &lt;code&gt;pneuma&lt;/code&gt;, you are more than welcome to. I am
not going to be accepting PRs at this time, but feel free to create issues and
comments. You can find the repo at
&lt;a href=&#34;https://github.com/sudosays/pneuma/&#34;&gt;https://github.com/sudosays/pneuma/&lt;/a&gt; or
check out the project page &lt;a href=&#34;http://sudosays.github.io/projects/pneuma/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;As of Hugo version 0.80.0&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;From the &lt;code&gt;tcell&lt;/code&gt; documentation regarding &lt;code&gt;PollEvent&lt;/code&gt;: &amp;ldquo;Main application
loops must spin on this to prevent the application from stalling.&amp;rdquo;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

      </content>
    </item>
    
    <item>
      <title>Pneuma</title>
      <link>http://sudosays.github.io/projects/pneuma/</link>
      <pubDate>Fri, 22 Jan 2021 09:22:16 +0200</pubDate>
      
      <guid>http://sudosays.github.io/projects/pneuma/</guid>
      <description>Pneuma (stylised as pneuma) is an interactive terminal frontend for managing a Hugo blog. As with Tempo, I built it for myself with the features I would like in it.
 The aim of the project is to provide a slick, minimal frontend for managing posts in a Hugo blog including the ability to edit and create new posts, as well as publish drafts.</description>
      <content>
        
&lt;p&gt;
Pneuma (stylised as pneuma) is an interactive terminal frontend for
managing a Hugo blog. As with Tempo, I built it for myself with the
features I would like in it.&lt;/p&gt;
&lt;p&gt;
The aim of the project is to provide a slick, minimal frontend for
managing posts in a Hugo blog including the ability to edit and create
new posts, as well as publish drafts.&lt;/p&gt;
&lt;p&gt;
It is written purely in Go, which marks my first big project in the
language. The text-ui is built using the wonderful
&lt;a href=&#34;https://github.com/gdamore/tcell&#34;&gt;tcell&lt;/a&gt; package by Garrett D&amp;#39;Amore.&lt;/p&gt;
&lt;div id=&#34;outline-container-lessons-learned-so-far&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;lessons-learned-so-far&#34;&gt;
Lessons Learned (So far)
&lt;/h3&gt;
&lt;div id=&#34;outline-text-lessons-learned-so-far&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go is a great language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building TUIs can become a massive rabbit-hole/timesink&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Callback functions and anonymous functions go well together&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-details&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;details&#34;&gt;
Details
&lt;/h3&gt;
&lt;div id=&#34;outline-text-details&#34; class=&#34;outline-text-3&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Section&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Target Platform(s)&lt;/td&gt;
&lt;td&gt;Linux/Unix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;td&gt;Pre-alpha&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Version&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-downloads-and-links&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;downloads-and-links&#34;&gt;
Downloads and Links
&lt;/h3&gt;
&lt;div id=&#34;outline-text-downloads-and-links&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sudosays/pneuma&#34;&gt;Github repo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

      </content>
    </item>
    
    <item>
      <title>Be Static to Go Faster</title>
      <link>http://sudosays.github.io/blog/be-static-to-go-faster/</link>
      <pubDate>Tue, 25 Feb 2020 16:50:02 +0200</pubDate>
      
      <guid>http://sudosays.github.io/blog/be-static-to-go-faster/</guid>
      <description>One of the important factors in being a supervillain is that you need to be able to get your word out there. This can be for multiple reasons such as recruiting henchmen, drawing the ire of heroes, networking with other supervillains, and the list goes on. For an incipient supervillain such as myself, this comes in the form of my blog.</description>
      <content>
        &lt;p&gt;One of the important factors in being a supervillain is that you need to be
able to get your word out there. This can be for multiple reasons such as
recruiting henchmen, drawing the ire of heroes, networking with other
supervillains, and the list goes on. For an incipient supervillain such as
myself, this comes in the form of my blog.&lt;/p&gt;
&lt;p&gt;I have had multiple attempts at running and maintaining a blog over the years
starting with multiple different Blogger sites. In fact, the first three posts
of this blog were carried over from a Blogger site, to a self-hosted Wordpress
site, and finally to this. Throughout my trials in blogging, I have always
wanted the control of writing my own HTML/CSS, but also the convenience of
content management that other solutions provide. I was dissatisfied with the
customisability of the blogging solutions I was using and also how slow they
were.&lt;/p&gt;
&lt;p&gt;That is when a friend suggested &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to me. Hugo is a
static site generator written in Go and features, well, a lot of features as
well as speed. The blog post you are currently reading was generated by Hugo
from a Markdown file (with some metadata) that I wrote in my favourite editor
vim. However, instead of evangalising Hugo (and by extension static site
generators) I thought I would share some numbers first.&lt;/p&gt;
&lt;h2 id=&#34;pagespeed-scores&#34;&gt;Pagespeed Scores&lt;/h2&gt;
&lt;p&gt;Google provides the Pagespeed tool that allows you to score how rapidly a
webpage is delivered to a visitor. For these scores I used the post &amp;ldquo;Devlog #4:
Tempo&amp;rdquo; because it is the last post I uploaded to my old Wordpress blog, and it
includes some images to load as well.&lt;/p&gt;
&lt;p&gt;One thing to bear in mind with this too is that the Wordpress site is hosted on
a shared Linux instance with
&lt;a href=&#34;https://www.afrihost.com/site/product/linux_hosting&#34;&gt;Afrihost&lt;/a&gt; while the
current site is hosted via &lt;a href=&#34;https://github.com/sudosays/sudosays.github.io&#34;&gt;Github
pages&lt;/a&gt;.  However, this is also
one of the multiple reasons why I chose to use Hugo and host it via Github:
uptime, speed, and cost.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Section&lt;/th&gt;
&lt;th&gt;WordPress&lt;/th&gt;
&lt;th&gt;Hugo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Overall Score&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First Contentful Paint&lt;/td&gt;
&lt;td&gt;4.2s&lt;/td&gt;
&lt;td&gt;1.4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First Meaningful Paint&lt;/td&gt;
&lt;td&gt;4.2s&lt;/td&gt;
&lt;td&gt;1.4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speed Index&lt;/td&gt;
&lt;td&gt;8.3s&lt;/td&gt;
&lt;td&gt;1.4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Time to Interactive&lt;/td&gt;
&lt;td&gt;7.4s&lt;/td&gt;
&lt;td&gt;1.4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First CPU Idle&lt;/td&gt;
&lt;td&gt;5.1s&lt;/td&gt;
&lt;td&gt;1.4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max Potential First Input Delay&lt;/td&gt;
&lt;td&gt;100ms&lt;/td&gt;
&lt;td&gt;20ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The number pretty much speak for themselves, but that is not wholly why I fell
in love with Hugo.&lt;/p&gt;
&lt;h2 id=&#34;the-evangelical-stuff&#34;&gt;The Evangelical Stuff&lt;/h2&gt;
&lt;p&gt;With Hugo I get to use git for managing my site, and writing Markdown files
locally is much more comfortable in vim that most of the online post authoring
tools I have used.&lt;/p&gt;
&lt;p&gt;You can choose to use a premade theme and adjust it yourself, or do what I did
and write a theme from scratch. This allows you massive control over the look
and feel of your site. My very first introduction to &amp;ldquo;coding&amp;rdquo; was a book my
parents bought me on writing HTML and CSS, and since then I have always had a
bit of a thing for writing my own sites from scratch.&lt;/p&gt;
&lt;p&gt;Extensibility with Hugo is limitless especially with shortcodes and partials,
but is also not necessary for running a very simple site. Hugo manages to
strike an excellent balance between being simple enough for anyone to get
started while being powerful enough for the more involved user.&lt;/p&gt;
&lt;p&gt;While I have only begun to scratch the surface of what is possible with Hugo, I
am already much, much happier with the workflow and I will admit, it has been a
factor in my increased blogging lately.&lt;/p&gt;
&lt;p&gt;So if you are looking to get the word out about your evil doings and schemes
and want something simple, powerful, and open source I would highly recommend
you give Hugo a&amp;hellip; Go.&lt;/p&gt;

      </content>
    </item>
    
    <item>
      <title>Commitunism</title>
      <link>http://sudosays.github.io/blog/commitunism/</link>
      <pubDate>Wed, 12 Feb 2020 15:20:38 +0200</pubDate>
      
      <guid>http://sudosays.github.io/blog/commitunism/</guid>
      <description>In my 2020 vision, I mentioned that this year I wanted to contribute to an open source project and I am happy to announce that my first ever pull request was merged. This post mainly concerns my experience of the contribution process and my thoughts throughout rather than an in depth technical report.</description>
      <content>
        &lt;p&gt;In my &lt;a href=&#34;http://sudosays.github.io/blog/2020-vision/&#34;&gt;2020 vision&lt;/a&gt;, I mentioned that this year I wanted to contribute to an
open source project and I am happy to announce that my first ever pull
request was &lt;a href=&#34;https://github.com/sylabs/singularity/commit/efeb67deb1519b792d021e6c305069701c5fe9a6&#34;&gt;merged&lt;/a&gt;.
This post mainly concerns my experience of the contribution process and my
thoughts throughout rather than an in depth technical report.&lt;/p&gt;
&lt;p&gt;When I embarked on this journey I had a few criteria that I was looking for in
my contribution. Specifically, I wanted to contribute something meaningful to
both me and others which meant that I wanted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to contribute to a project I use or found interesting&lt;/li&gt;
&lt;li&gt;to add value to others&#39; experience&lt;/li&gt;
&lt;li&gt;to add value to the project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With those parameters I went through the Github issues of projects I liked and
checked the &amp;ldquo;good first issue&amp;rdquo; labels until I stumbled upon &lt;a href=&#34;https://github.com/sylabs/singularity/issues/3502&#34;&gt;this one&lt;/a&gt;
in the repository for Singularity (a containerisation tool for high performance
computing on Linux). The issue stood out to me, because I had also stumbled
into the same headache as the author and it seemed to me to be a very
achievable thing to fix.&lt;/p&gt;
&lt;p&gt;At first, I was tempted to comment on the issue that I could look into it, but
a teacher of mine once told me, &amp;ldquo;talk is cheap&amp;rdquo;, and so I decided to instead
produce a solution first.&lt;/p&gt;
&lt;h2 id=&#34;doing-my-homework&#34;&gt;Doing My Homework&lt;/h2&gt;
&lt;p&gt;Although I had a vague idea of what the process was for contributing to
open source projects, I also know that each project might have a subtly
different workflow for contributions. As a result, I made sure to read the
contribution guidelines for the project, and forked the repo.&lt;/p&gt;
&lt;p&gt;The first thing to do was to ensure that I was able to actually compile the
project from source, which meant understanding the build system and
dependencies. Luckily, working with lots of build systems (and even writing my
own makefiles) meant that it went smoothly and soon I had a workflow figured
out.&lt;/p&gt;
&lt;h2 id=&#34;finding-the-problem&#34;&gt;Finding the Problem&lt;/h2&gt;
&lt;p&gt;At this point, I had reached the limit of my comfort zone. The project is
written in Go which I had very little experience with having only completed
the Tour of Go previously. Furthermore, I was not at all familiar with the
codebase and so my first issue was finding where the problem could actually be
solved.&lt;/p&gt;
&lt;p&gt;Thankfully, I am a bit lazy and instead of reading through each and every file
to find something I ended up using a recursive &lt;code&gt;grep&lt;/code&gt; search to find the
specific occurrence of the sanity check prompt.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ grep -r &amp;quot;Build target already exists&amp;quot;

cmd/internal/cli/build.go: question := &amp;quot;Build target already exists. Do you want to overwrite? [N/y] &amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So I dove into the &lt;code&gt;build.go&lt;/code&gt; file and found the line where the prompt was
being served, but if I was really clever I would have added the &lt;code&gt;-n&lt;/code&gt; option to
&lt;code&gt;grep&lt;/code&gt; which would spit out the line number as well as the file it was in.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ grep -rn &amp;quot;Build target already exists&amp;quot;

cmd/internal/cli/build.go:268: question := &amp;quot;Build target already exists. Do you want to overwrite? [N/y] &amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;initial-solve&#34;&gt;Initial Solve&lt;/h2&gt;
&lt;p&gt;My first thought about solving this was to check if the build target file had
the &lt;code&gt;.def&lt;/code&gt; extension that denotes it as a build file. However, there were two
big issues with this approach: it depended on the name of the file rather than
the content, it required introducing the &lt;code&gt;os&lt;/code&gt; package to the file which I
thought was unnecessary.&lt;/p&gt;
&lt;p&gt;Looking through the file for tools I could use I came across the following
method &lt;code&gt;parser.IsValidDefinition(path string)&lt;/code&gt; which would judge a build target
file on its content rather than its name. Furthermore, it incorporated the
internally built tools to check definition files. This lead me to the following
diff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#000080;font-weight:bold&#34;&gt;diff --git a/cmd/internal/cli/build.go b/cmd/internal/cli/build.go
&lt;/span&gt;&lt;span style=&#34;color:#000080;font-weight:bold&#34;&gt;index fe02643162..558a7a2bfc 100644
&lt;/span&gt;&lt;span style=&#34;color:#000080;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;--- a/cmd/internal/cli/build.go
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+++ b/cmd/internal/cli/build.go
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;@@ -265,7 +265,17 @@ func checkBuildTarget(path string) error {
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt; 			return fmt.Errorf(&amp;#34;only sandbox update is supported: %s is not a directory&amp;#34;, path)
 		}
 		if !buildArgs.update &amp;amp;&amp;amp; !forceOverwrite {
&lt;span style=&#34;color:#a40000&#34;&gt;-			question := &amp;#34;Build target already exists. Do you want to overwrite? [N/y] &amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+			var question string
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+			isDefFile, _ := parser.IsValidDefinition(path)
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+			if isDefFile {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+				question = &amp;#34;Build target is a valid definition file that will be overwritten. Do you still want to overwrite? [N/y]&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+			} else {
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+				question = &amp;#34;Build target already exists. Do you want to overwrite? [N/y] &amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+			}
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt; 			input, err := interactive.AskYNQuestion(&amp;#34;n&amp;#34;, question)
 			if err != nil {
 				return fmt.Errorf(&amp;#34;while reading the input: %s&amp;#34;, err)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What followed was a bit strange for me. I pushed the new commit/branch to my
fork with the commit message &amp;ldquo;Add build command sanity check to close #3502&amp;rdquo;
with &amp;ldquo;#3502&amp;rdquo; being the reference to the issue in the main repo. I did not
expect this to immediately reflect on the issue in the main upstream
repository. So when I amended my commit because I forgot to ensure all the test
cases, and builds passed, it also reflected multiple commits on the main issue
conversation. Although unexpected, this is very useful for connecting commits
to issues automagically.&lt;/p&gt;
&lt;p&gt;Excited and thrilled, I opened a pull request and waited for a review.&lt;/p&gt;
&lt;h2 id=&#34;feedback-loop&#34;&gt;Feedback Loop&lt;/h2&gt;
&lt;p&gt;The pull review process was also a novel experience for me. Initially I was
worried that my changes would be outright rejected, and my PR tanked. Instead,
there was a back and forth discussion between myself and &lt;a href=&#34;https://github.com/dctrud&#34;&gt;David
Trudgian&lt;/a&gt; &amp;mdash; a maintainer for the project.&lt;/p&gt;
&lt;p&gt;The conversation about how to address the problem resulted &amp;mdash; at least in my
view &amp;mdash; in a solution that was greater than something I could have achieved by
myself. I would incorporate suggested changes and neaten up my code which ended
up in a total of three commits for the pull request. The review process felt
very welcoming and collaborative.&lt;/p&gt;
&lt;h2 id=&#34;victory&#34;&gt;Victory&lt;/h2&gt;
&lt;p&gt;With all suggestions incorporated, continuous integration and build tests
passed, my PR finally passed review and was merged into the master branch.&lt;/p&gt;
&lt;p&gt;While I believe that the contribution I made was definitely beneficial to
future users of the software, I definitely walked away from this experience
with a lot more insight. I experienced the power of the review process, and
that contributing to open source is not only achievable, but exciting and
enjoyable.&lt;/p&gt;
&lt;p&gt;I definitely plan on making more contributions to Singularity in the future,
although I suspect not all of them will warrant a full blog post.&lt;/p&gt;

      </content>
    </item>
    
    <item>
      <title>Vim Leadership Revisited</title>
      <link>http://sudosays.github.io/blog/vim-leadership-revisited/</link>
      <pubDate>Tue, 14 Nov 2017 00:03:12 +0200</pubDate>
      
      <guid>http://sudosays.github.io/blog/vim-leadership-revisited/</guid>
      <description>A while ago I wrote about my discovery of using the leader key in vim (you can read that here). Now, after using it for a while I would like to revisit it and share my experiences and what I have learned.
First of all, do not use the spacebar for your leader key, and second of all beware your timeouts.</description>
      <content>
        &lt;p&gt;A while ago I wrote about my discovery of using the leader key in vim (you can
read that &lt;a href=&#34;http://sudosays.github.io/blog/being-a-leader-in-vim/&#34;&gt;here&lt;/a&gt;). Now, after using
it for a while I would like to revisit it and share my experiences and what I
have learned.&lt;/p&gt;
&lt;p&gt;First of all, do not use the spacebar for your leader key, and second of all
beware your timeouts.&lt;/p&gt;
&lt;h2 id=&#34;vim-on-timeout&#34;&gt;Vim on timeout&lt;/h2&gt;
&lt;p&gt;After a while of using a custom leader key I started noticing that vim would
lag for approximately a second every now and then. At first I thought it was
the plugins I had installed that were causing vim to render slowly,  but after
removing them the problem persisted. Then I thought it was my fancy text
highlighting using the cursorline settings, but after removing that too I still
had the same problem. The only thing left in my vimrc were the leader key
remaps.&lt;/p&gt;
&lt;p&gt;As it turns out, vim automatically has a timeout setting that can get quite
annoying when your leader key is &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;. Essentially, vim will wait until it
is sure that it has or has not recieved a mapping before typing anything to
screen. This meant that everytime I hit &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; vim would wait for up to one
second before being sure that I did not type a custom leader mapping.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;You should try it yourself and not just take my word for it&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So when I checked the vim help system I found the following two options regarding timeout:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ttimeout&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; is the default behaviour of vim and it waits for an entire mapping
whereas &lt;code&gt;ttimeout&lt;/code&gt; will timeout on key codes.&lt;/p&gt;
&lt;p&gt;This means that I wanted &lt;code&gt;timeout&lt;/code&gt; off and &lt;code&gt;ttimeout&lt;/code&gt; on so that my vim would
continue to add keys until it matches a mapping for the leader key. You should
try it yourself and not just take my word for it. Run the following commands in
vim to test them out:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:set noto&lt;/code&gt; and &lt;code&gt;:set to&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:set nottimeout&lt;/code&gt; and &lt;code&gt;:set ttimeout&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Try different combinations of &lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;ttimeout&lt;/code&gt; to see what best suits your
editing style.&lt;/p&gt;
&lt;h2 id=&#34;change-of-leadership&#34;&gt;Change of leadership&lt;/h2&gt;
&lt;p&gt;However, I found that using comma (&#39;&lt;code&gt;,&lt;/code&gt;&#39;) instead of &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; was a much better
leader key and is not too awkward to use. The nice thing about this is that you
only have to change you leader key and all your mappings will still work.&lt;/p&gt;

      </content>
    </item>
    
    <item>
      <title>Being a Leader in Vim</title>
      <link>http://sudosays.github.io/blog/being-a-leader-in-vim/</link>
      <pubDate>Fri, 26 May 2017 13:42:25 +0200</pubDate>
      
      <guid>http://sudosays.github.io/blog/being-a-leader-in-vim/</guid>
      <description>As far as using IDEs go, I wouldn’t say I’ve been around the block, but I’ve seen my fair share. It was only when I started running Arch Linux that I first switched to vim. At this point you might be expecting me to sing vim’s praises and how every developer worth their salt should be using it.</description>
      <content>
        &lt;p&gt;As far as using IDEs go, I wouldn’t say I’ve been around the block, but I’ve
seen my fair share. It was only when I started running &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch
Linux&lt;/a&gt; that I first switched to
&lt;a href=&#34;http://www.vim.org/&#34;&gt;vim&lt;/a&gt;. At this point you might be expecting me to sing
vim’s praises and how every developer worth their salt should be using it. I’m
not going to.&lt;/p&gt;
&lt;p&gt;The learning curve for vim is steep. It took me a long time to wrap my head
around what the different modes meant, and everyday I use it I learn something
new. Hopefully, from now on I’ll be sharing those discoveries with you, dear
reader.&lt;/p&gt;
&lt;p&gt;I also didn’t stay with vim once I started using it. I switched between vim,
&lt;a href=&#34;http://spacemacs.org/&#34;&gt;spacemacs&lt;/a&gt; (which is great, I highly recommend you give
it a spin), IntelliJ IDEA, Visual Studio, and a whole plethora of others.&lt;/p&gt;
&lt;p&gt;But now I’m back on the vim train. And I’ve discovered the leader key.&lt;/p&gt;
&lt;h2 id=&#34;what-does-a-leader-do&#34;&gt;What does a leader do?&lt;/h2&gt;
&lt;p&gt;The leader key is essentially a prefix that you can set for remapping keys/key
sequences in vim. The notion is strongly implemented in spacemacs where almost
every command is started by pressing &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;. In, vim, this means that you can
remap a whole bunch of commands that you can run easily by pressing the leader
key followed by your mapping.&lt;/p&gt;
&lt;p&gt;For example, if my leader key is &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; and I can have vim exit whenever I
press &lt;code&gt;&amp;lt;Space&amp;gt;q&lt;/code&gt; by mapping it to the vim command &lt;code&gt;:q&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means that you can set custom key sequences (not just keys) to execute any
kind of vim command. Literally any command you can execute in vim.&lt;/p&gt;
&lt;p&gt;Any. Command.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-the-leader-key&#34;&gt;How to use the leader key&lt;/h2&gt;
&lt;p&gt;In your &lt;code&gt;.vimrc&lt;/code&gt; file you first designate which key to set as the leader key
with:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let mapleader=&amp;quot;{key here}&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Personally, I would recommend the &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; key as it is really comfortable to
use.&lt;/p&gt;
&lt;p&gt;Then you can remap any sequence to a command in the form of:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[nnore]map &amp;lt;leader&amp;gt;{key sequence} :{vim command}&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For example, if I want to exit vim, saving all the files before I do so I would
have the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;qq :wqa&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Why are you using &lt;code&gt;nnoremap&lt;/code&gt; and not just &lt;code&gt;map&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;nnoremap&lt;/code&gt; instead of &lt;code&gt;map&lt;/code&gt; just means that the sequences you’ve set in your
&lt;code&gt;.vimrc&lt;/code&gt; file will be mapped explicitly as is for the normal mode in vim. By
setting it for normal mode only I’m making sure that the leader key only works
in the normal mode for vim and not the insert or visual modes.&lt;/p&gt;
&lt;p&gt;And that’s it for my knowledge of vim leader key use. I’ll leave a list of my
current remappings below for you to use should you wish. This has been a very
brief and shallow dip into the abyss that is vim and vim customization. If you
want me to do a whole series on getting into vim and my experiences please let
me know either here or on twitter!&lt;/p&gt;
&lt;h2 id=&#34;remappings&#34;&gt;Remappings&lt;/h2&gt;
&lt;p&gt;Set the leader key&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let mapleader=&amp;quot;&amp;lt;Space&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Quit and save all files&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;qq :wqa&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Edit &lt;code&gt;.vimrc&lt;/code&gt; file&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;fed :e $MYVIMRC&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reload &lt;code&gt;.vimrc&lt;/code&gt; file&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;fer :source $MYVIMRC&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      </content>
    </item>
    
  </channel>
</rss>
